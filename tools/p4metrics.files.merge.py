#!/usr/bin/python

#
# This script merges perforce metrics files generated by perforce_commit_metrics.py
#
#

import sys
import re
import json
from subprocess import Popen, PIPE
from optparse import OptionParser

#
# command arguments / options
# Example:
# 		%prog -t json *.json
#
parser = OptionParser(usage="usage: %prog [options] file1 file2 ...")
parser.add_option("-t", dest="file_type",
                  help="file type to merge (e.g. 'json', 'csv')")
parser.add_option("-o", dest="out_prefix", default="p4metrics.merged",
                  help="prefix of output merged file [default: %default]")
(options, args) = parser.parse_args()

if not options.file_type:
    parser.print_help()
    sys.exit()

if len(args) == 0:
    parser.print_help()
    sys.exit()

#
# variables
#
OPTIONS = vars(options)
FILE_SRC = args
FILE_TYPE = OPTIONS["file_type"]
OUT_PREFIX = OPTIONS["out_prefix"]

#
# Functions
#


def merge_csv(file_src, file_target):
    csv_header = str()
    csv_content = set()
    # 1st file
    with open(file_src.pop(0)) as f:
        content = f.readlines()
        csv_header = content.pop(0).rstrip()
        csv_content.update(set(content))
    # the rest files
    for fname in file_src:
        with open(fname) as f:
            content = f.readlines()
            header = content.pop(0).rstrip()
            if header != csv_header:
                print "CSV files do not have the same header"
                sys.exit()
            csv_content.update(set(content))
    # comp to sort
    def change_nr_compare(line1, line2):
        c1 = int(line1[:line1.find(",")])
        c2 = int(line2[:line2.find(",")])
        return c2 - c1
    # output
    out_csv = open(file_target, 'w')
    out_csv.write(csv_header)
    out_csv.write('\n')
    for line in sorted(csv_content, cmp=change_nr_compare):
        out_csv.write(line.rstrip())
        out_csv.write('\n')
    out_csv.close()

def merge_json(file_src, file_target):
    json_content = {}
    # 1st file
    with open(file_src.pop(0)) as f:
        json_content = json.load(f)
    # the rest files
    for fname in file_src:
        with open(fname) as f:
            content = json.load(f)
            for file_path, commit_list in content.items():
                if file_path in json_content:
                    merged_list = sorted(set(json_content[file_path] + commit_list), reverse=True)
                    json_content[file_path] = merged_list
                else:
                    json_content[file_path] = commit_list
    out_json = open(file_target, 'w')
    out_json.write(json.dumps(json_content, indent=0, sort_keys=True))
    out_json.close()

#
# Main
#
if FILE_TYPE == "csv":
    merge_csv(FILE_SRC, "%s.csv" % OUT_PREFIX)
elif FILE_TYPE == "json":
    merge_json(FILE_SRC, "%s.files.json" % OUT_PREFIX)
else:
    print "Unsupported file type: %s" % FILE_TYPE
    sys.exit()

sys.exit()


# { "file path" : [ revision ] }
commit_files = {}

# CSV "change,date,time,file_add,file_del,file_change,line_add,line_del,line_change"
out_csv = open("%s.csv" % OUT_PREFIX, 'w')


#
# regex
#
# Example: Change 470596 on 2012/06/18 11:29:38 by max.mustermann@c-max.mustermann-dev 'REFACTORED: refactoring example'
# (changelist) (date) (time)
regex_p4change = re.compile(
    "Change\s+(\d+)\s+on\s+(\d+/\d+/\d+)\s+(\d+:\d+:\d+)")
# Example: ... //sw/src/plugin/Configuration.xml#7 edit
regex_p4describe_file_op = re.compile(
    "^\.\.\.\s+(.+)#(\d+)\s+(\w+)\s*$")         # (file) (rev) (op)
# Example: add 1 chunks 2 lines
regex_p4describe_line_op = re.compile(
    "^(\w+).+(\d+)\s+lines\s*$")                 # (line op) (lines)


# OUTPUT: CSV meta
out_csv.write(
    "change,date,time,file_add,file_del,file_change,line_add,line_del,line_change")


# $ p4 changes -t -u max.mustermann @2012/01/01,@now
proc_p4changes = Popen(["p4", "changes", "-t", "-u", USER_NAME,
                        "%s,%s" % (DATE_FROM, DATE_TO)], stdout=PIPE, stderr=PIPE)
stdout_p4changes = proc_p4changes.communicate()[0]

# Extract "p4 changes"
for p4change in stdout_p4changes.split('\n'):
    # Match (changelist) (date) (time)
    regex_p4change_search = regex_p4change.search(p4change)

    if regex_p4change_search:

        CHANGELIST_NR = regex_p4change_search.group(1)
        CHANGELIST_DATE = regex_p4change_search.group(2)
        CHANGELIST_TIME = regex_p4change_search.group(3)

        # counters
        changelist_file_op_count = {"add": 0, "delete": 0, "edit": 0}
        changelist_line_op_count = {"add": 0, "deleted": 0, "changed": 0}

        # $ p4 describe -dsbw CHANGELIST_NR
        proc_p4describe = Popen(
            ["p4", "describe", "-dsbw", CHANGELIST_NR], stdout=PIPE, stderr=PIPE)
        stdout_p4describe = proc_p4describe.communicate()[0]

        # Extract "p4 describe"
        for p4describe in stdout_p4describe.split('\n'):
            # Match (file#rev) (op)
            regex_p4describe_file_op_search = regex_p4describe_file_op.search(
                p4describe)
            # Match (line op) (lines)
            regex_p4describe_line_op_search = regex_p4describe_line_op.search(
                p4describe)

            # Extract "Affected files ..."
            if regex_p4describe_file_op_search:
                # file edit, add, delete
                FILE_PATH = regex_p4describe_file_op_search.group(1)
                FILE_REV = int(regex_p4describe_file_op_search.group(2))
                FILE_OP = regex_p4describe_file_op_search.group(3)

                # collect commited files revisions
                if not FILE_PATH in commit_files:
                    commit_files[FILE_PATH] = []
                commit_files[FILE_PATH].append(FILE_REV)

                # count file ops
                if not FILE_OP in changelist_file_op_count:
                    changelist_file_op_count[FILE_OP] = 0
                changelist_file_op_count[FILE_OP] += 1

                # count lines of ADD / DELETE file
                if not NOT_COUNT_ADD_DEL:
                    # count lines of "add" files
                    if FILE_OP == "add":
                        proc_p4print = Popen(["p4", "print", "%s#%s" % (
                            FILE_PATH, str(FILE_REV))], stdout=PIPE, stderr=PIPE)
                        stdout_p4print = proc_p4print.communicate()[0]
                        LINE_COUNT = len(stdout_p4print.split('\n')) - 1
                        if not "add" in changelist_line_op_count:
                            changelist_line_op_count["add"] = 0
                        changelist_line_op_count["add"] += LINE_COUNT
                    # count lines of "delete" files
                    if FILE_OP == "delete":
                        proc_p4print = Popen(["p4", "print", "%s#%s" % (
                            FILE_PATH, str(FILE_REV - 1))], stdout=PIPE, stderr=PIPE)
                        stdout_p4print = proc_p4print.communicate()[0]
                        LINE_COUNT = len(stdout_p4print.split('\n')) - 1
                        if not "deleted" in changelist_line_op_count:
                            changelist_line_op_count["deleted"] = 0
                        changelist_line_op_count["deleted"] += LINE_COUNT

            #	Extract "Differences ..."
            if regex_p4describe_line_op_search:
                LINE_OP = regex_p4describe_line_op_search.group(1)
                LINE_COUNT = int(regex_p4describe_line_op_search.group(2))
                # count lines of "edit" files
                if not LINE_OP in changelist_line_op_count:
                    changelist_line_op_count[LINE_OP] = 0
                changelist_line_op_count[LINE_OP] += LINE_COUNT

        # OUTPUT:
        # CSV data: "change, date, time, file_add, file_del, file_change, line_add, line_del, line_change"
        out_csv.write("\n")
        out_csv.write("%s,%s,%s,%s,%s,%s,%s,%s,%s" % (
            CHANGELIST_NR,
            CHANGELIST_DATE,
            CHANGELIST_TIME,
            changelist_file_op_count["add"],
            changelist_file_op_count["delete"],
            changelist_file_op_count["edit"],
            changelist_line_op_count["add"],
            changelist_line_op_count["deleted"],
            changelist_line_op_count["changed"]))

        # progress shown on stdout
        if not STDOUT_QUIET:
            print CHANGELIST_NR

# OUTPUT: dump commit files into file
out_json.write(json.dumps(commit_files, indent=0, sort_keys=True))

# close files
out_csv.close()
out_json.close()
